#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <errno.h>
#include <time.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <pthread.h>

#include "chat.h"

static void *recv_pthread(int clientSocket, void *tid)
{
	char recvbuffer[1024];

	while(1) {
		if(recv(clientSocket, recvbuffer, sizeof(recvbuffer), 0) <= 0)
			break;
		time_t timep;
		time(&timep);
		printf("%s <<<< %s\n", recvbuffer, ctime(&timep));
	}	

	close(clientSocket);

	printf("thread %s closed.\n",tid);
	pthread_exit(tid);
	
}

static void *send_pthread(int clientSocket, char *nickname, void *tid)
{
	char sendbuffer[1024], buf[100];

	while(1) {
		printf("%s: ", nickname);
		fgets(sendbuffer, sizeof(sendbuffer), stdin);
		if (strcmp(sendbuffer, COMMAND_QUIT) == 0) {
			printf("do you wanna quit? (\"y\"->quit; any key continue) :");
			fgets(buf, sizeof(buf), stdin);
			if (strcmp(buf,"y\n") == 0) {
				break;
			}
		}
		if(send(clientSocket, sendbuffer, strlen(sendbuffer)+1, 0) <= 0) {
			break;	
		}
	}
	
	close(clientSocket);
	printf("thread %s closed.\n",tid);
	pthread_exit(tid);
	
}


int start_client(char *nickname)
{
	char SERVER_PORT[100];
	char SERVER_IP[100];
	int clientSocket, ret, fd[2], ret_fd;
	serverinfo serverinfo;

	char sendbuffer[1024], recvbuffer[1024];
	char buf[100];
	char *state = COMMAND_QUIT;

	pthread_t id[2];

	clientSocket = socket(AF_INET, SOCK_STREAM, 0);
	if (clientSocket < 0) {
		fprintf(stderr, "%s: Unable to create socket\n", __func__);
		return -ENOMEM;
	}
	
	/* Server IP and port from config file */
	ret=chat_serverinfo(&serverinfo);

	struct sockaddr_in addr;
	addr.sin_family = AF_INET;
	addr.sin_port = htons(atoi(serverinfo.SERVER_PORT));
	addr.sin_addr.s_addr = inet_addr(serverinfo.SERVER_IP);
	socklen_t addrlen = sizeof(addr);

	ret = connect(clientSocket, (const struct sockaddr*)(&addr), addrlen);
	if(ret == -1) {
		perror("connect");
		return -1;
	}

	printf("connect server successfully!\n");
	printf("Your nickname: %s\n", nickname);
	send(clientSocket, nickname, strlen(nickname)+1, 0);

	//send message
	ret = pthread_create(&id[1], NULL, send_pthread(clientSocket, nickname, "send"), "send");
	pthread_detach(id[1]);			//非阻塞
	fprintf(stdout, "%s >>send msg>> create:%ul\n", __func__, &id[1]);
	if (ret != 0) {
		printf("send msg>> create failed\n");
	}

	//receive message
	ret = pthread_create(&id[2], NULL, recv_pthread(clientSocket, "recv"), "recv");
	pthread_detach(id[2]);
	fprintf(stdout, "%s >>recv msg>> create:%ul\n", __func__, &id[2]);
	if (ret != 0) {
		printf("read msg>> create failed\n");
	}

	return 0;	
}

